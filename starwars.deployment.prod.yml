apiVersion: apps/v1
kind: Deployment
metadata:
  name: starwars
spec:
  selector:
    matchLabels:
      app: starwars
  replicas: 2
  template:
    metadata:
      labels:
        app: starwars
    spec:
      containers:
        - name: starwars
          image: godofshinobi/nodeapp:latest
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 3000
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: starwars-service
#   annotations:
#     kubernetes.digitalocean.com/load-balancer-id: "92d9a3c4-6db3-496b-a4e4-ec0fef86edc7"
#     service.beta.kubernetes.io/do-loadbalancer-size-unit: "3"
#     service.beta.kubernetes.io/do-loadbalancer-disable-lets-encrypt-dns-records: "false"
# spec:
#   selector:
#     app: starwars
#   type: LoadBalancer
#   ports:
#     - protocol: TCP
#       port: 3000
#       targetPort: 3000
# setup nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:stable-alpine
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  annotations:
    kubernetes.digitalocean.com/load-balancer-id: "92d9a3c4-6db3-496b-a4e4-ec0fef86edc7"
    service.beta.kubernetes.io/do-loadbalancer-size-unit: "3"
    service.beta.kubernetes.io/do-loadbalancer-disable-lets-encrypt-dns-records: "false"
spec:
  selector:
    app: nginx
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
